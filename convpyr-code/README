--------------------
Convolution Pyramids
--------------------


This Matlab code is submitted as part of the supplementary material for the 
SIGGRAPH Asia 2011 paper "Convolution Pyramids" by Zeev Farbman, Raanan 
Fattal and Dani Lischinski.

For the most up-to-date information check the project website:
http://www.cs.huji.ac.il/labs/cglab/projects/convpyr

Convolution pyramids is a method for rapid numerical approximation of
convolutions with filters of large support. This code demonstrates both how 
to use the convolution pyramids and how to optimize the kernel set which
defines the pyramid.

The code is intended to be as simple and illustrative as possible and isn't
optimized for performance. The reported running times in the paper were 
obtained using an optimized C++ implementation.

REQUIRES: Image Processing Toolbox, Optimization Toolbox



Section 4 - Gradient Integration
--------------------------------
Shows how to use a convolution with Green's function in order to obtain the
fundamental solution to the Poisson equation.


./Sec4_Greens/runme.m 

Shows how an image can be reconstructed from it's gradients. Notice the
treatment of the boundary conditions (padding the signal with zeros on the
boundary). Changing the way the boundary is handled will require to find a
new set of kernels accordingly.

./Sec4_Greens/HDR/runme.m

Shows how to obtain an image from a manipulated gradient field. The example
is loosely based on "Gradient Domain High-Dynamic Range Image Compression" 
by [Fattal et al. 2002]

./Sec4_Greens/optimization/runme.m

Shows how to setup the optimization which finds the coefficients of the 
kernels. 
The script starts by computing the divergence of the gradient field of the 
training image(box.jpg). The optimization aims to find the kernels which 
will reconstruct  the image from the divergence. A result on the test image 
(chart.jpg) is shown after the optimization is finished. The fact that we 
use an image and not simply delta function/Green's function input/output is
to mitigate as much as possible translation variance artifacts (due to 
subsampling).
Notice that although the optimization starts with a random set of 
numbers and (in most cases) converges to a satisfactory solution, you are 
not guaranteed to get a global minimum. Better initial guess and more 
advanced optimization methods can potentially lead to better results.



Section 5 - Boundary Interpolation
----------------------------------
Shows how to approximate a convolution formulation of Shepard's interpolation
and create a smooth membrane which can be used in the context of seamless
image cloning.


./Sec5_Boundary/runme.m 

Shows the result of seamless image cloning using Poisson equation, 
convolution formulation of the Shepard's method (via FFT) and convolution 
pyramid. 



Section 6 - Gaussian Kernels
----------------------------


./Sec6_Gaussian/runme.m 

Shows how to optimize a set of kernels which approximate a convolution with
a Gaussian with a specific sigma parameter. You can change the sigma value
in the code. After the optimization the code compares the value of the 
approximate convolution vs ground truth (full Gaussian kernel).







